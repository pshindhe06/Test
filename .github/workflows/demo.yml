name: Salesforce Release and Deployment

on:
  push:
    branches:
      - release/*  # Trigger on release branch creation
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to trigger'
        required: true
        type: choice
        options:
          - validate
          - deploy
          - both

jobs:
  validate-prod:
    runs-on: ubuntu-latest
    # Ensure validate-prod runs when 'validate' or 'both' is selected, or for release branches
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'validate' || github.event.inputs.action == 'both' }}

    steps:
      # Checkout the release branch
      - name: Checkout Release Branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Salesforce CLI
      - name: Set up Salesforce CLI
        run: |
          npm install sfdx-cli

      # Authenticate to Salesforce Prod Org using OAuth
      - name: Authenticate to Salesforce Prod Org (OAuth)
        run: |
          sf auth:web:login --clientid ${{ secrets.SALESFORCE_CLIENT_ID }} --clientsecret ${{ secrets.SALESFORCE_PRIVATE_KEY }} --setdefaultusername --instanceurl https://prakash06-dev-ed.my.salesforce.com/

      # Generate Delta Package for Prod (Release vs Master)
      - name: Generate Delta Package for Prod (Release vs Master)
        run: |
          echo "Generating delta package for new, modified, and deleted components between release and master..."
          mkdir delta-package
          npx sfdx sgd:source:delta --to "refs/heads/master" --from "refs/heads/release/${GITHUB_REF##*/}" --output delta-package/ --generate-delta --source force-app/

      # Validate Delta Changes in Salesforce Prod Org
      - name: Validate Delta Changes in Salesforce Prod Org
        run: |
          echo "Validating delta changes (new, modified, deleted components) in Salesforce Prod Org..."
          mkdir -p validation-reports  # Create the folder to store reports
          sf project deploy start -x delta-package/package/package.xml --checkonly --testlevel RunLocalTests --resultformat json --wait 10 > validation-reports/validation-report.json  # Store results as JSON

      # Optional: Display Validation Results (can be enhanced with failure logic)
      - name: Display Validation Results
        run: |
          echo "Displaying validation results."
          cat validation-reports/validation-report.json  # Display the validation report content

  
