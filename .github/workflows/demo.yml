name: Salesforce Release and Deployment

on:
  push:
    branches:
      - release/*  # Trigger on release branch creation
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action to trigger'
        required: true
        type: choice
        options:
          - validate
          - deploy
          - both

jobs:
  validate-prod:
    runs-on: ubuntu-latest
    # Ensure validate-prod runs when 'validate' or 'both' is selected, or for release branches
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'validate' || github.event.inputs.action == 'both' }}

    steps:
      # Checkout the release branch
      - name: Checkout Release Branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Salesforce CLI
      - name: Set up Salesforce CLI
        uses: sfdx/actions/setup-sfdx@v1
        with:
          sfdx-version: '7.x'

      # Authenticate to Salesforce Prod Org using OAuth
      - name: Authenticate to Salesforce Prod Org (OAuth)
        run: |
          sfdx auth:web:login --clientid ${{ secrets.SALESFORCE_CLIENT_ID }} --clientsecret ${{ secrets.SALESFORCE_CLIENT_SECRET }} --setdefaultusername --instanceurl https://login.salesforce.com

      # Generate Delta Package for new, modified, and deleted components between release and master branches
      - name: Generate Delta Package for Prod (Release vs Master)
        run: |
          echo "Generating delta package for new, modified, and deleted components between release and master..."
          mkdir delta-package
          npx sfdx sgd:source:delta --to "refs/heads/master" --from "refs/heads/release/${GITHUB_REF##*/}" --output delta-package/ --generate-delta --source force-app/

      # Validate Delta Changes in Salesforce Prod Org
      - name: Validate Delta Changes in Salesforce Prod Org
        run: |
          echo "Validating delta changes (new, modified, deleted components) in Salesforce Prod Org..."
          mkdir -p validation-reports  # Create the folder to store reports
          sfdx force:source:deploy -x delta-package/package/package.xml --checkonly --testlevel RunLocalTests --resultformat json --wait 10 > validation-reports/validation-report.json  # Store results as JSON

      # Optional: Display Validation Results (can be enhanced with failure logic)
      - name: Display Validation Results
        run: |
          echo "Displaying validation results."
          cat validation-reports/validation-report.json  # Display the validation report content

  deploy-prod:
    runs-on: ubuntu-latest
    needs: validate-prod
    # Ensure deploy-prod runs only when 'deploy' or 'both' is selected
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy' || github.event.inputs.action == 'both' }}

    steps:
      # Checkout the release branch
      - name: Checkout Release Branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Sync delta changes from release branch to master branch before deployment
      - name: Sync Delta Changes from Release Branch to Master (before deployment)
        run: |
          git fetch origin
          git checkout master  # Checkout the master branch
          git merge origin/release/${GITHUB_REF##*/}  # Merge the release branch into master
          git push origin master  # Push the updated master branch

      # Set up Salesforce CLI
      - name: Set up Salesforce CLI
        uses: sfdx/actions/setup-sfdx@v1
        with:
          sfdx-version: '7.x'

      # Authenticate to Salesforce Prod Org using OAuth
      - name: Authenticate to Salesforce Prod Org (OAuth)
        run: |
          sfdx auth:web:login --clientid ${{ secrets.SALESFORCE_CLIENT_ID }} --clientsecret ${{ secrets.SALESFORCE_CLIENT_SECRET }} --setdefaultusername --instanceurl https://prakash06-dev-ed.my.salesforce.com/

      # Deploy Only Validated Delta Components to Salesforce Prod Org
      - name: Deploy Validated Delta Components to Salesforce Prod Org
        run: |
          echo "Deploying validated delta components to Salesforce Prod Org..."
          sfdx force:source:deploy -x delta-package/package/package.xml -w 10

      # Run Apex Tests in Salesforce Prod Org
      - name: Run Apex Tests in Salesforce Prod Org
        run: |
          echo "Running Apex tests in Salesforce Prod Org..."
          sfdx force:apex:test:run --resultformat human --codecoverage --synchronous --outputdir ./testResults

      # Check Code Coverage and Fail if Below 75%
      - name: Check Code Coverage for Prod
        run: |
          echo "Checking Code Coverage..."
          coverage_check=$(sfdx force:apex:test:run --resultformat json --codecoverage --synchronous | jq '.result.coverage >= 75')
          if [ "$coverage_check" != "true" ]; then
            echo "Code coverage is below 75%. Failing the deployment."
            exit 1
          fi
