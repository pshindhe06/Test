name: Salesforce Release and Deployment

on:
  push:
    branches:
      - release/*  # Trigger on release branch creation
  workflow_dispatch: 
      inputs:
        action:
           description: 'Select action to trigger'
           required: true
           type: choice
           options:
            - validate
            - deploy
            - both 

jobs:
  validate-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release/*'  # Ensure it runs for a release branch
    
    steps:
      # Checkout the release branch
      - name: Checkout Release Branch
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
     
        
      # Set up Salesforce CLI
      - name: Set up Salesforce CLI
        uses: sfdx/actions/setup-sfdx@v1
        with:
          sfdx-version: '7.x'

      # Install sfdx-git-delta plugin
      - name: Install sfdx-git-delta plugin
        run: |
          npm install -g sfdx-cli
          npx sfdx plugins:install sfdx-git-delta

            # Store secret for target Org.
            - name: 'Populate auth file with SFDX_URL secret of the QA'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_DEMO}} > ./SFDX_DEMO.txt
                  
      # Authenticate to Salesforce Prod Org for validation
      - name: Authenticate to Salesforce Prod Org
        run: |
     
          run: npx sfdx auth:sfdxurl:store -f ./SFDX_DEMO.txt -s -a QA

      # Generate Delta Package for new, modified, and deleted components between release and master branches
      - name: Generate Delta Package for Prod (Release vs Master)
        run: |
          echo "Generating delta package for new, modified, and deleted components between release and master..."
          mkdir delta-package
          # Generate the delta package using sfdx-git-delta comparing release branch with master branch
          npx sfdx sgd:source:delta --to "refs/heads/master" --from "refs/heads/release/${GITHUB_REF##*/}" --output delta-package/ --generate-delta --source force-app/

      # Validate Delta Changes in Salesforce Prod Org
      - name: Validate Delta Changes in Salesforce Prod Org
        run: |
          echo "Validating delta changes (new, modified, deleted components) in Salesforce Prod Org..."
          mkdir -p validation-reports  # Create the folder to store reports
          sfdx force:source:deploy -x delta-package/package/package.xml -u ${{ secrets.SFDX_DEMO}} --checkonly --testlevel RunLocalTests --resultformat json --wait 10 > validation-reports/validation-report.json  # Store results as JSON

      # Optional: Display Validation Results (can be enhanced with failure logic)
      - name: Display Validation Results
        run: |
          echo "Displaying validation results."
          cat validation-reports/validation-report.json  # Display the validation report content
  
  deploy-prod:
    runs-on: ubuntu-latest
    needs: validate-prod
    if: github.ref == 'refs/heads/release/*'  # Ensure it runs for a release branch
    
    steps:
      # Checkout the release branch
      - name: Checkout Release Branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # Sync delta changes from release branch to master branch before deployment
      - name: Sync Delta Changes from Release Branch to Master (before deployment)
        run: |
          git fetch origin
          git checkout master  # Checkout the master branch
          git merge origin/release/${GITHUB_REF##*/}  # Merge the release branch into master
          git push origin master  # Push the updated master branch

      # Set up Salesforce CLI
      - name: Set up Salesforce CLI
        uses: sfdx/actions/setup-sfdx@v1
        with:
          sfdx-version: '7.x'

      # Authenticate to Salesforce Prod Org for deployment
      - name: Authenticate to Salesforce Prod Org
        
        run: npx sfdx auth:sfdxurl:store -f ./SFDX_DEMO.txt -s -a QA

      # Deploy Only Validated Delta Components to Salesforce Prod Org
      - name: Deploy Validated Delta Components to Salesforce Prod Org
        run: |
          echo "Deploying validated delta components to Salesforce Prod Org..."
          sfdx force:source:deploy -x delta-package/package/package.xml -u ${{ secrets.SFDX_DEMO }} -w 10

      # Run Apex Tests in Salesforce Prod Org
      - name: Run Apex Tests in Salesforce Prod Org
        run: |
          echo "Running Apex tests in Salesforce Prod Org..."
          sfdx force:apex:test:run --resultformat human --codecoverage --synchronous --outputdir ./testResults

      # Check Code Coverage and Fail if Below 75%
      - name: Check Code Coverage for Prod
        run: |
          echo "Checking Code Coverage..."
          coverage_check=$(sfdx force:apex:test:run --resultformat json --codecoverage --synchronous | jq '.result.coverage >= 75')
          if [ "$coverage_check" != "true" ]; then
            echo "Code coverage is below 75%. Failing the deployment."
            exit 1
          fi